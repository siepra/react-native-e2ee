import com.android.Version
import org.gradle.internal.os.OperatingSystem;

buildscript {
  ext.kotlin_version = '1.9.20'

  repositories {
    google()
    mavenCentral()
  }

  dependencies {
    classpath "com.android.tools.build:gradle:7.2.2"
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
  }
}

plugins {
  id 'de.undercouch.download' version '4.1.1'
}

apply plugin: 'de.undercouch.download'

apply plugin: 'kotlin-android'

def _minSdkVersion = ((rootProject?.ext?.properties?.minSdkVersion) ?: 24)

def isNewArchitectureEnabled() {
  return rootProject.hasProperty("newArchEnabled") && rootProject.getProperty("newArchEnabled") == "true"
}

apply plugin: "com.android.library"

if (isNewArchitectureEnabled()) {
  apply plugin: "com.facebook.react"
}

def getExtOrDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : project.properties["E2ee_" + name]
}

def getExtOrIntegerDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : (project.properties["E2ee_" + name]).toInteger()
}

static def supportsNamespace() {
  def parsed = Version.ANDROID_GRADLE_PLUGIN_VERSION.tokenize('.')
  def major = parsed[0].toInteger()
  def minor = parsed[1].toInteger()

  // Namespace support was added in 7.3.0
  return (major == 7 && minor >= 3) || major >= 8
}

android {
  if (supportsNamespace()) {
    namespace "com.e2ee"

    sourceSets {
      main {
        manifest.srcFile "src/main/AndroidManifestNew.xml"
      }
    }
  }

  packagingOptions {
    pickFirst 'lib/x86/libc++_shared.so'
    pickFirst 'lib/x86_64/libc++_shared.so'
    pickFirst 'lib/armeabi-v7a/libc++_shared.so'
    pickFirst 'lib/arm64-v8a/libc++_shared.so'
    pickFirst 'lib/x86/libfbjni.so'
    pickFirst 'lib/x86_64/libfbjni.so'
    pickFirst 'lib/armeabi-v7a/libfbjni.so'
    pickFirst 'lib/arm64-v8a/libfbjni.so'
  }

  rootProject.ext.ffmpegKitPackage = "video"

  ndkVersion getExtOrDefault("ndkVersion")
  compileSdkVersion getExtOrIntegerDefault("compileSdkVersion")

  defaultConfig {
    minSdkVersion getExtOrIntegerDefault("minSdkVersion")
    targetSdkVersion getExtOrIntegerDefault("targetSdkVersion")

    externalNativeBuild {
      cmake {
        cppFlags "-O2 -frtti -fexceptions -Wall -fstack-protector-all"
      }
    }

    ndk {
      // noinspection ChromeOsAbiSupport
      abiFilters = ["x86_64", "arm64-v8a"]
    }

    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
  }

  externalNativeBuild {
    cmake {
      path "CMakeLists.txt"
    }
  }

  buildTypes {
    release {
      minifyEnabled false
    }
  }

  testOptions {
    unitTests.all {
      useJUnitPlatform()
    }
  }

  lintOptions {
    disable "GradleCompatible"
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

   packagingOptions {
     exclude("META-INF/LICENSE.md")
     exclude("META-INF/LICENSE-notice.md")
   }
}

repositories {
  mavenCentral()
  google()
  maven { url 'https://www.jitpack.io/' }
}

dependencies {
  testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.0'
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.0'

  androidTestImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.0'
  androidTestRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.0'

 androidTestImplementation "androidx.test:runner:1.5.0"
//  androidTestImplementation "androidx.test:rules:1.5.0"

  implementation("androidx.core:core-ktx:1.12.0")

  implementation("org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version")

  // For < 0.71, this will be from the local maven repo
  // For > 0.71, this will be replaced by `com.facebook.react:react-android:$version` by react gradle plugin
  // noinspection GradleDynamicVersion
  implementation "com.facebook.react:react-android:0.72.7"
}

task downloadAndBuildOpenSSL {

  String arch;
  String compiler_prefix;
  String ndk_bundle_path;
  String toolchain_path;

  def nativeLibrariesABIs = android.defaultConfig.ndk.abiFilters;
  if (nativeLibrariesABIs == null) {
    // No abiFilter is defined for the build. Build native libraries for every architecture.
    nativeLibrariesABIs = ["armeabi-v7a", "arm64-v8a", "x86_64"] as Set<String>;
  }

  nativeLibrariesABIs.each { abi_name ->
    arch = {
      switch (abi_name) {
        case 'armeabi-v7a':
          'arm'
          break
        case 'arm64-v8a':
          'arm64'
          break
        default:
          abi_name
          break
      }
    }()

    switch (arch) {
      case 'arm':
        compiler_prefix = "armv7a-linux-androideabi"
        break
      case 'x86_64':
        compiler_prefix = "x86_64-linux-android"
        break
      case 'arm64':
        compiler_prefix = "aarch64-linux-android"
        break
      default:
        throw new GradleException("Unsupported architecture for native libraries: ${arch}")
        break
    }

    String temp_host_tag
    if (OperatingSystem.current().isMacOsX()) {
      temp_host_tag = 'darwin-x86_64'
    } else if (OperatingSystem.current().isLinux()) {
      temp_host_tag = 'linux-x86_64'
    } else {
      throw new GradleException("Unsupported operating system for native libraries: ${OperatingSystem.current().getName()}")
    }

    ndk_bundle_path = android.ndkDirectory
    toolchain_path = "${ndk_bundle_path}/toolchains/llvm/prebuilt/${temp_host_tag}"
  }

  doLast {
    // Download OpenSSL
    def openssl_source_file = new File(buildDir, 'openssl-3.2.0.tar.gz')
    def openssl_dest = "${buildDir}/openssl-3.2.0/"
    if (!openssl_source_file.exists()) {
      download {
        src 'https://www.openssl.org/source/openssl-3.2.0.tar.gz'
        dest new File(buildDir, 'openssl-3.2.0.tar.gz')
      }
    }

    // Extract the tarball
    exec {
      commandLine 'tar', '-xvf', openssl_source_file, '-C', buildDir
    }

    // Configure OpenSSL
    exec {
      workingDir openssl_dest
      environment "ANDROID_NDK_ROOT", ndk_bundle_path
      environment "PATH", "$toolchain_path/bin:${System.env.PATH}"
      commandLine './Configure', "android-${arch}", "no-asm", "-D__ANDROID_API__=${_minSdkVersion}"
    }

    // Build OpenSSL
    exec {
      workingDir openssl_dest
      environment "ANDROID_NDK_ROOT", ndk_bundle_path
      environment "PATH", "$toolchain_path/bin:${System.env.PATH}"
      commandLine 'make', 'build_libs'
    }
  }
}
